{"version":3,"sources":["Screenshot/theme.ts","Screenshot/Screenshot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["themes","light","primary","secondary","primaryTextColor","backgroundColor","dark","Container","styled","div","props","Figure","figure","Image","img","Wizard","color","url","theme","animate","type","useState","screenshot","setScreeshot","loading","setLoading","setErrors","useEffect","fetch","then","resp","json","errors","catch","err","serverError","href","title","target","src","alt","App","className","style","width","height","Screenshot","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"2NAeeA,EAfA,CACbC,MAAO,CACLC,QAAS,UACTC,UAAW,UACXC,iBAAkB,UAClBC,gBAAiB,WAEnBC,KAAM,CACJJ,QAAS,UACTC,UAAW,UACXC,iBAAkB,UAClBC,gBAAiB,Y,gaCNrB,IAAME,EAAYC,IAAOC,IAAV,KAIO,SAACC,GAAD,OAAWA,EAAML,mBAKjCM,EAASH,IAAOI,OAAV,KAMNC,EAAQL,IAAOM,IAAV,KAyDIC,EAlD2B,SAAC,GAMpC,IAAD,IALJC,aAKI,MALI,UAKJ,EAJJC,EAII,EAJJA,IAII,IAHJX,YAGI,SACEY,GADF,EAFJC,QAEI,EADJC,KAEcd,EAAON,EAAOM,KAAON,EAAOC,OADtC,EAE+BoB,mBAAS,IAFxC,mBAEGC,EAFH,KAEeC,EAFf,OAG0BF,oBAAS,GAHnC,mBAGGG,EAHH,KAGYC,EAHZ,OAIwBJ,mBAAS,IAJjC,mBAIWK,GAJX,WA2BJ,OArBAC,qBAAU,WACRF,GAAW,GACXC,EAAU,IACVE,MAAM,mDAAD,OAAoDX,IACtDY,MAAK,SAACC,GACL,OAAOA,EAAKC,UAEbF,MAAK,SAACE,GACDA,EAAKC,OACPN,EAAUK,EAAKC,QAEfT,EAAaQ,EAAKT,YAEpBG,GAAW,MAEZQ,OAAM,SAACC,GACNT,GAAW,GACXC,EAAU,CAAES,YAAa,+BAE5B,CAAClB,IAGF,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAACX,EAAD,CAAWF,gBAAiBW,GACzBQ,EACC,oDAEA,uBAAGY,KAAMnB,EAAKoB,MAAOpB,EAAKqB,OAAO,UAC/B,kBAAC3B,EAAD,KACE,kBAACE,EAAD,CAAO0B,IAAKjB,EAAYkB,IAAKvB,SCvD5BwB,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,MAChC,kBAACC,EAAD,CAAY7B,IAAI,qBAAqBG,KAAK,YCK9B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f468e1b5.chunk.js","sourcesContent":["const themes = {\n  light: {\n    primary: \"#302AE6\",\n    secondary: \"#536390\",\n    primaryTextColor: \"#ffffff\",\n    backgroundColor: \"#ffffff\",\n  },\n  dark: {\n    primary: \"#9A97F3\",\n    secondary: \"#818cab\",\n    primaryTextColor: \"#e1e1ff\",\n    backgroundColor: \"#161625\",\n  },\n};\n\nexport default themes;\n","import React, { useEffect, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { ScreenshotProps, ContainerProps } from \"./types\";\nimport themes from \"./theme\";\n\nconst Container = styled.div<ContainerProps>`\nmin-width:\n  width: 100%;\n  padding: 15px;\n  background-color: ${(props) => props.backgroundColor};\n  border: 1px solid #ddd;\n  box-sizing: border-box;\n`;\n\nconst Figure = styled.figure`\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0;\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n`;\n\n/**\n * Stepper Wizard\n */\nconst Wizard: React.FC<ScreenshotProps> = ({\n  color = \"#F0FFFF\",\n  url,\n  dark = false,\n  animate = false,\n  type = \"NONE\",\n}) => {\n  const theme = dark ? themes.dark : themes.light;\n  const [screenshot, setScreeshot] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    setLoading(true);\n    setErrors({});\n    fetch(`https://screenshotapi.net/api/v1/screenshot?url=${url}`)\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((json) => {\n        if (json.errors) {\n          setErrors(json.errors);\n        } else {\n          setScreeshot(json.screenshot);\n        }\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setErrors({ serverError: \"Something wnet wrong!\" });\n      });\n  }, [url]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container backgroundColor={color}>\n        {loading ? (\n          <p>Loading screenshot...</p>\n        ) : (\n          <a href={url} title={url} target=\"_blank\">\n            <Figure>\n              <Image src={screenshot} alt={url} />\n            </Figure>\n          </a>\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default Wizard;\n","import React from \"react\";\nimport Screenshot from \"./Screenshot\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ width: 300, height: 300 }}>\n        <Screenshot url=\"https://google.com\" type=\"NONE\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}